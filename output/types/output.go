// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package types

import "fmt"
import "reflect"
import "encoding/json"

type ServiceOutput []struct {
	// City corresponds to the JSON schema field "city".
	City *ServiceOutputElemCity `json:"city,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name"`

	// Price corresponds to the JSON schema field "price".
	Price float64 `json:"price"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags,omitempty"`
}

var enumValues_ServiceOutputElemCity = []interface{}{
	"bj",
	"sh",
	"hk",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ServiceOutputElemCity) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_ServiceOutputElemCity {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_ServiceOutputElemCity, v)
	}
	*j = ServiceOutputElemCity(v)
	return nil
}

type ServiceOutputElemCity string

const ServiceOutputElemCityBj ServiceOutputElemCity = "bj"
const ServiceOutputElemCityHk ServiceOutputElemCity = "hk"
const ServiceOutputElemCitySh ServiceOutputElemCity = "sh"
